using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using NUnit.Framework;

namespace Portoa.Tests {
	[TestFixture, Ignore]
	public class DataGenerator {

		[Test]
		public void Generate_country_enum() {
			const string code = @"//This file was automatically generated by {0} on {1}
//Don't modify this file directory, instead edit the code that generated this file

using System.ComponentModel;
using Portoa.Util;

namespace Portoa.Globalization {{
	// ReSharper disable InconsistentNaming
	///<summary>Auto-generated enumeration of every country supported by <see cref=""System.Globalization.CultureInfo""/></summary>
	public enum Country {{
{2}
	}}
	// ReSharper restore InconsistentNaming

	public static class CountryExtensions {{
		/// <summary> Gets the human-readable display name for a <see cref=""Country""/> </summary>
		public static string GetDisplayName(this Country country) {{
			return country.GetAttributes<DescriptionAttribute>()[0].Description;
		}}
	}}
}}";

			var cultures = CultureInfo.GetCultures(CultureTypes.SpecificCultures);
			var regions = new List<RegionInfo>();
			foreach (var region in cultures.Select(culture => new RegionInfo(culture.LCID)).Where(region => !regions.Contains(region))) {
				regions.Add(region);
			}

			var valuesCode = new StringBuilder(1000);
			var invalidCharRegex = new Regex(@"\W");
			foreach (var region in regions.OrderBy(region => region.EnglishName)) {
				valuesCode.Append(string.Format("\t\t///<summary>The country {0}</summary>{1}", region.EnglishName, Environment.NewLine));
				var name = region
					.EnglishName
					.Split(' ')
					.Aggregate(string.Empty, (current, word) => current + (word[0].ToString().ToUpperInvariant() + word.Substring(1)));

				var validName = invalidCharRegex.Replace(name, "");

				valuesCode.Append(string.Format("\t\t[Description(\"{0}\")]{1}", region.EnglishName, Environment.NewLine));
				valuesCode.Append(string.Format("\t\t{0} = {1},{2}", validName, region.GeoId, Environment.NewLine));
			}

			const string path = @"c:\users\tmont\code\Portoa\Src\Portoa\Globalization\Country.cs";
			using (var stream = File.Open(path, FileMode.OpenOrCreate, FileAccess.Write)) {
				stream.SetLength(0);
				using (var writer = new StreamWriter(stream)) {
					writer.Write(string.Format(code, GetType().FullName + ".Generate_country_enum()", DateTime.Now, valuesCode));
				}
			}
		}
	}
}